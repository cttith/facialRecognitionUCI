use_session_with_seed(1)
early_stop <- callback_early_stopping(monitor = "val_loss",
patience = 20)
Emotion_hiddenLayerNodes = (499+4)/2
rand_test = sample(1:499, 499)
temp_train_images_ANN = train_images_ANN[rand_test,,]
temp_train_emotions_onehot = train_emotions_onehot[rand_test,]
model <- keras_model_sequential(layers=list(
layer_flatten(input_shape = c(128,120)),
layer_dense(units=Emotion_hiddenLayerNodes, activation = 'relu'),    # not sure about hidden layer unit size yet
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')))
model
compile(model,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
# Fitting model
emotionHistory <- fit(model,
train_images_ANN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
early_stop=list(early_stop),
epochs = 200)
score <- evaluate(model,
test_images_ANN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Face ANN
# SETTING UP LAYERS
use_session_with_seed(1)
early_stop <- callback_early_stopping(monitor = "val_loss",
patience = 20)
Face_hiddenLayerNodes = (499+20)/2
rand_test = sample(1:499, 499)
temp_train_images_ANN = train_images_ANN[rand_test,,]
temp_train_faces_onehot = train_faces_onehot[rand_test,]
model <- keras_model_sequential(layers=list(
layer_flatten(input_shape = c(128,120)),
layer_dense(units=Face_hiddenLayerNodes, activation = 'relu'),    # not sure about hidden layer unit size yet
layer_dense(units = ncol(train_faces_onehot),activation = 'softmax')))
model
compile(model,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
# Fitting model
faceHistory <- fit(model,
train_images_ANN, train_faces_onehot,
validation_split = 0.2, batch_size=32,
early_stop=list(early_stop),
epochs = 20)
score <- evaluate(model,
test_images_ANN, test_faces_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Face ANN
# SETTING UP LAYERS
use_session_with_seed(1)
early_stop <- callback_early_stopping(monitor = "val_loss",
patience = 20)
Face_hiddenLayerNodes = (499+20)/2
rand_test = sample(1:499, 499)
temp_train_images_ANN = train_images_ANN[rand_test,,]
temp_train_faces_onehot = train_faces_onehot[rand_test,]
model <- keras_model_sequential(layers=list(
layer_flatten(input_shape = c(128,120)),
layer_dense(units=Face_hiddenLayerNodes, activation = 'relu'),    # not sure about hidden layer unit size yet
layer_dense(units = ncol(train_faces_onehot),activation = 'softmax')))
model
compile(model,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
# Fitting model
faceHistory <- fit(model,
temp_train_images_ANN, temp_train_faces_onehot,
validation_split = 0.2, batch_size=32,
early_stop=list(early_stop),
epochs = 20)
score <- evaluate(model,
test_images_ANN, test_faces_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
library(keras)
# split data
#train_images <- array(dim=c(n.train.im, 28, 28))
#for (j in 1:n.train.im)  train_images[j,,]  <- train.images.28x28.gray[[rand.samp[j]]]
n <- length(pixelMap)     # num of imgs
set.seed(1)
train <- sample(n,0.8*n)
train_images <- pixelMap[train]
train_emotions <- emotionLabel[train]
train_faces <- nameLabel[train]
train_positions <- positionLabel[train]
train_sunglasses <- sunglassesLabel[train]
test_images <- pixelMap[-train]
test_emotions <- emotionLabel[-train]
test_faces <- nameLabel[-train]
test_positions <- positionLabel[-train]
test_sunglasses <- sunglassesLabel[-train]
# Train images for CNN (requires 4 dimensions)
numTrainImages = length(train_images)
train_images_CNN <- array(dim=c(numTrainImages, 128, 120,1))
for( j in 1:numTrainImages) train_images_CNN[j,,,] <- train_images[[j]]
numTestImages = length(test_images)
test_images_CNN <- array(dim=c(numTestImages, 128, 120,1))
for (j in 1:numTestImages)  test_images_CNN[j,,,]  <- test_images[[j]]
# Train images for ANN (requires 3 dimensions)
train_images_ANN <- array(dim=c(numTrainImages, 128, 120))
for (j in 1:numTrainImages)  train_images_ANN[j,,]  <- train_images[[j]]
test_images_ANN <- array(dim=c(numTestImages, 128, 120))
for (j in 1:numTestImages)  test_images_ANN[j,,]  <- test_images[[j]]
# one hot encoding
train_emotions_onehot <- to_categorical(as.numeric(as.factor(train_emotions))-1)
train_positions_onehot <- to_categorical(as.numeric(as.factor(train_positions))-1)
train_sunglasses_onehot <- to_categorical(as.numeric(as.factor(train_sunglasses))-1)
train_faces_onehot <- to_categorical(as.numeric(as.factor(train_faces))-1)
test_emotions_onehot <- to_categorical(as.numeric(as.factor(test_emotions))-1)
test_positions_onehot <- to_categorical(as.numeric(as.factor(test_positions))-1)
test_sunglasses_onehot <- to_categorical(as.numeric(as.factor(test_sunglasses))-1)
test_faces_onehot <- to_categorical(as.numeric(as.factor(test_faces))-1)
# Model for Face ANN
# SETTING UP LAYERS
use_session_with_seed(1)
early_stop <- callback_early_stopping(monitor = "val_loss",
patience = 20)
Face_hiddenLayerNodes = (499+20)/2
rand_test = sample(1:499, 499)
temp_train_images_ANN = train_images_ANN[rand_test,,]
temp_train_faces_onehot = train_faces_onehot[rand_test,]
model <- keras_model_sequential(layers=list(
layer_flatten(input_shape = c(128,120)),
layer_dense(units=Face_hiddenLayerNodes, activation = 'relu'),    # not sure about hidden layer unit size yet
layer_dense(units = ncol(train_faces_onehot),activation = 'softmax')))
model
compile(model,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
# Fitting model
faceHistory <- fit(model,
temp_train_images_ANN, temp_train_faces_onehot,
validation_split = 0.2, batch_size=32,
early_stop=list(early_stop),
epochs = 20)
score <- evaluate(model,
test_images_ANN, test_faces_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Face ANN
# SETTING UP LAYERS
use_session_with_seed(1)
early_stop <- callback_early_stopping(monitor = "val_loss",
patience = 20)
Face_hiddenLayerNodes = (499+20)/2
rand_test = sample(1:499, 499)
temp_train_images_ANN = train_images_ANN[rand_test,,]
temp_train_faces_onehot = train_faces_onehot[rand_test,]
model <- keras_model_sequential(layers=list(
layer_flatten(input_shape = c(128,120)),
layer_dense(units=Face_hiddenLayerNodes, activation = 'relu'),    # not sure about hidden layer unit size yet
layer_dense(units = ncol(train_faces_onehot),activation = 'softmax')))
model
compile(model,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
# Fitting model
faceHistory <- fit(model,
train_images_ANN, train_faces_onehot,
validation_split = 0.2, batch_size=32,
early_stop=list(early_stop),
epochs = 20)
score <- evaluate(model,
test_images_ANN, test_faces_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
View(test_faces_onehot)
View(test_faces_onehot)
# Model for Faces CNN
model<-keras_model_sequential()
#configuring the Model
model %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = 20,activation = "softmax")
compile(model,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
modelHistory <- fit(model,
train_images_CNN, train_faces_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(model,
test_final_images_CNN, test_faces_onehot)
score <- evaluate(model,
test_images_CNN, test_faces_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Emotions CNN
emotion_hiddenLayersNodes = (499+4)/2
emotionModel<-keras_model_sequential()
#configuring the Model
emotionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = emotion_hiddenLayerNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')
compile(faceModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
faceHistory <- fit(model,
train_images_CNN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(faceModel,
test_images_CNN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Emotions CNN
use_session_with_seed(1)
emotion_hiddenLayersNodes = (499+4)/2
emotionModel<-keras_model_sequential()
#configuring the Model
emotionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = emotion_hiddenLayerNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')
compile(faceModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
faceHistory <- fit(model,
train_images_CNN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(faceModel,
test_images_CNN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Emotions CNN
use_session_with_seed(1)
emotion_hiddenLayersNodes = (499+4)/2
emotionModel<-keras_model_sequential()
#configuring the Model
emotionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = emotion_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')
compile(faceModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
faceHistory <- fit(model,
train_images_CNN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(faceModel,
test_images_CNN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Emotions CNN
use_session_with_seed(1)
emotion_hiddenLayersNodes = (499+4)/2
emotionModel<-keras_model_sequential()
#configuring the Model
emotionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = emotion_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')
compile(emotionModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
emotionHistory <- fit(emotionModel,
train_images_CNN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(emotionModel,
test_images_CNN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Sunglasses CNN
use_session_with_seed(1)
sunglasses_hiddenLayersNodes = (499+2)/2
sunglassesModel<-keras_model_sequential()
#configuring the Model
sunglassesModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = sunglasses_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_sunglasses_onehot),activation = 'softmax')
compile(sunglassesModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
sunglassesHistory <- fit(sunglassesModel,
train_images_CNN, train_sunglasses_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(sunglassesModel,
test_images_CNN, test_sunglasses_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Position CNN
use_session_with_seed(1)
position_hiddenLayersNodes = (499+4)/2
positionModel<-keras_model_sequential()
#configuring the Model
positionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = position_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_positions_onehot,activation = 'softmax')
compile(positionsModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
positionHistory <- fit(positionModel,
train_images_CNN, train_positions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(emotionModel,
test_images_CNN, test_positions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Position CNN
use_session_with_seed(1)
position_hiddenLayersNodes = (499+4)/2
positionModel<-keras_model_sequential()
#configuring the Model
positionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = position_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_positions_onehot,activation = 'softmax')
compile(positionModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
positionHistory <- fit(positionModel,
train_images_CNN, train_positions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(emotionModel,
test_images_CNN, test_positions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Position CNN
use_session_with_seed(1)
position_hiddenLayersNodes = (499+4)/2
positionModel<-keras_model_sequential()
#configuring the Model
positionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = position_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_positions_onehot),activation = 'softmax')
compile(positionModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
positionHistory <- fit(positionModel,
train_images_CNN, train_positions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(emotionModel,
test_images_CNN, test_positions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Emotions CNN
use_session_with_seed(1)
emotion_hiddenLayersNodes = (499+4)/2
emotionModel<-keras_model_sequential()
#configuring the Model
emotionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = emotion_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')
compile(emotionModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
emotionHistory <- fit(emotionModel,
train_images_CNN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(emotionModel,
test_images_CNN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Emotion ANN
# SETTING UP LAYERS
use_session_with_seed(1)
early_stop <- callback_early_stopping(monitor = "val_loss",
patience = 20)
emotion_hiddenLayerNodes = ((128*120)+2)/2
rand_test = sample(1:499, 499)
temp_train_images_ANN = train_images_ANN[rand_test,,]
temp_train_emotions_onehot = train_emotions_onehot[rand_test,]
model <- keras_model_sequential(layers=list(
layer_flatten(input_shape = c(128,120)),
layer_dense(units=Emotion_hiddenLayerNodes, activation = 'relu'),    # not sure about hidden layer unit size yet
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')))
model
compile(model,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
# Fitting model
emotionHistory <- fit(model,
train_images_ANN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
early_stop=list(early_stop),
epochs = 200)
score <- evaluate(model,
test_images_ANN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
# Model for Emotions CNN
use_session_with_seed(1)
emotion_hiddenLayersNodes = ((128*120)+2)/2
emotionModel<-keras_model_sequential()
#configuring the Model
emotionModel %>%
layer_conv_2d(filter=32,kernel_size=c(3,3),padding="same",input_shape=c(128,120,1),activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_conv_2d(filter=32,kernel_size=c(3,3), activation = "relu") %>%
layer_max_pooling_2d(pool_size=c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = emotion_hiddenLayersNodes,activation = "relu")  %>%
layer_dense(units = ncol(train_emotions_onehot),activation = 'softmax')
compile(emotionModel,
optimizer ='adam',
loss='categorical_crossentropy',
metrics = 'accuracy')
emotionHistory <- fit(emotionModel,
train_images_CNN, train_emotions_onehot,
validation_split = 0.2, batch_size=32,
epochs = 500,
callbacks = list(early_stop))
score <- evaluate(emotionModel,
test_images_CNN, test_emotions_onehot)
cat('Test loss:', score$loss, "\n")
cat('Test accuracy:', score$acc, "\n")
